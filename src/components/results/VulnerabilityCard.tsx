
import React, { useState } from 'react';
import { AlertTriangle, ChevronDown, Code, Copy, Check, ExternalLink } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'high' | 'medium' | 'low' | 'critical';
  lineNumber: number;
  fileName: string;
  code: string;
  fix: {
    description: string;
    code: string;
  };
  cweId?: string;
  references?: string[];
}

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
}

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [copied, setCopied] = useState(false);

  const severityColors = {
    critical: 'bg-red-900/20 text-red-700 border-red-700/30',
    high: 'bg-shield-high/20 text-shield-high border-shield-high/30',
    medium: 'bg-shield-medium/20 text-shield-medium border-shield-medium/30',
    low: 'bg-shield-low/20 text-shield-low border-shield-low/30'
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  return (
    <Card className={cn(
      "border-l-4", 
      {
        "border-l-red-700": vulnerability.severity === 'critical',
        "border-l-shield-high": vulnerability.severity === 'high',
        "border-l-shield-medium": vulnerability.severity === 'medium',
        "border-l-shield-low": vulnerability.severity === 'low',
      }
    )}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <div className="flex items-center gap-2">
            <AlertTriangle className={cn(
              "h-5 w-5",
              {
                "text-red-700": vulnerability.severity === 'critical',
                "text-shield-high": vulnerability.severity === 'high',
                "text-shield-medium": vulnerability.severity === 'medium',
                "text-shield-low": vulnerability.severity === 'low',
              }
            )} />
            <CardTitle className="text-lg">{vulnerability.title}</CardTitle>
          </div>
          <Badge className={severityColors[vulnerability.severity]}>
            {vulnerability.severity.toUpperCase()}
          </Badge>
        </div>
        <CardDescription className="mt-1">
          {vulnerability.fileName} (line {vulnerability.lineNumber})
          {vulnerability.cweId && (
            <span className="ml-2 text-xs text-muted-foreground">
              CWE-{vulnerability.cweId}
            </span>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="text-sm mb-4">{vulnerability.description}</p>
        
        <div className="space-y-4">
          <div>
            <h4 className="text-sm font-medium flex items-center mb-2">
              <Code className="h-4 w-4 mr-1.5" /> Vulnerable Code
            </h4>
            <div className="code-block">
              <pre className="text-xs">
                <code>{vulnerability.code}</code>
              </pre>
            </div>
          </div>
          
          {isExpanded && (
            <>
              <div>
                <h4 className="text-sm font-medium mb-2">AI-Suggested Fix</h4>
                <p className="text-sm mb-2 text-muted-foreground">{vulnerability.fix.description}</p>
                <div className="code-block relative">
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    className="absolute top-2 right-2 h-6 w-6"
                    onClick={() => copyToClipboard(vulnerability.fix.code)}
                  >
                    {copied ? (
                      <Check className="h-4 w-4 text-shield-low" />
                    ) : (
                      <Copy className="h-4 w-4" />
                    )}
                  </Button>
                  <pre className="text-xs">
                    <code>{vulnerability.fix.code}</code>
                  </pre>
                </div>
              </div>
              
              {vulnerability.references && vulnerability.references.length > 0 && (
                <div>
                  <h4 className="text-sm font-medium mb-2">Learn More</h4>
                  <ul className="space-y-1">
                    {vulnerability.references.map((ref, index) => (
                      <li key={index}>
                        <a 
                          href={ref} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-xs text-shield-primary hover:underline flex items-center"
                        >
                          <ExternalLink className="h-3 w-3 mr-1" />
                          {ref.replace(/^https?:\/\//, '').substring(0, 40)}...
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </>
          )}
        </div>
      </CardContent>
      <CardFooter className="flex justify-between pt-2 border-t border-border/30">
        <Button
          variant="ghost"
          size="sm"
          className="text-xs flex items-center gap-1"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? 'Hide Details' : 'Show Fix & Details'}
          <ChevronDown className={`h-4 w-4 transition-transform ${isExpanded ? 'rotate-180' : ''}`} />
        </Button>
        
        <div className="flex gap-2">
          <Button size="sm" variant="outline" className="text-xs">
            Ignore
          </Button>
          <Button size="sm" className="text-xs bg-shield-primary hover:bg-shield-primary/90">
            Apply Fix
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
};

export default VulnerabilityCard;
